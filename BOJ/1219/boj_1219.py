# -*- coding: utf-8 -*-
"""BOJ_1219.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROOpyQs-ShVMh9PiZOi49uaYB6GLgVTu
"""

import sys
import collections
max_value = sys.maxsize

def check(graph, n, destination, end):
    Q = collections.deque()
    Q.append(destination)
    v = [destination]

    while Q:
        start = Q.popleft()

        for d, time in graph[start]:
            if d == end:
                return True
            if d not in v:
                Q.append(d)
                v.append(d)
    return False

cycle = False
n ,start, end, m = map(int, input().split())

graph = {i:[] for i in range(n)}
edges = []
for i in range(m):
    a, b, c = map(int, input().split())
    edges.append([a,b,c])

# 마을에서 벌 수 있는 비용    
p = list(map(int, input().split()))

for a,b,c in edges:
    graph[a].append([b, c-p[b]])

dist = {i:max_value for i in range(n)}
dist[start] = -p[start]

for _ in range(n-1):
    for node in graph:
        for destination, time in graph[node]:
            if dist[node]!= max_value and dist[destination] > dist[node] + time:
                dist[destination] = dist[node] + time

if dist[end] == max_value:
    print('gg')
    sys.exit(0)

for node in graph:
    for destination, time in graph[node]:
        if dist[destination]!= max_value and dist[destination] > dist[node] + time:
            if check(graph, n, destination, end):
                print('Gee')
                sys.exit(0)


print(-dist[end])