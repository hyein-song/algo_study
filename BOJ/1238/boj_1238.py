# -*- coding: utf-8 -*-
"""BOJ_1238.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agyPekPcuQ94hGNTm1h8ulTgdI325sUy
"""

import collections
import heapq
import sys
max_val = sys.maxsize

def d(graph, start):
    dist = {i:max_val for i in graph}
    dist[start] = 0
    Q = []
    heapq.heappush(Q, [dist[start], start])

    while Q:
        cur_dist, cur_start = heapq.heappop(Q)
        if cur_dist > dist[cur_start]:
            continue
        for new_start, new_dist in graph[cur_start]:
            distance = cur_dist + new_dist
            if dist[new_start] > distance:
                dist[new_start] = distance
                heapq.heappush(Q, [distance, new_start])
    return dist



N, M, X = map(int, input().split())
graph = collections.defaultdict(list)

for _ in range(M):
    start, end, t = map(int, input().split())
    graph[start].append([end, t])

result = 0   
for i in range(1,N+1):
    if i != X:
        result = max(result,d(graph, i)[X] + d(graph, X)[i])
print(result)