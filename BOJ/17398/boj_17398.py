# -*- coding: utf-8 -*-
"""BOJ_17398.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bZ0A8hJZ1GbtiyD_A6c9IYKmIyDh5jbu
"""

import sys
# input = sys.stdin.readline
sys.setrecursionlimit(1000000)

def find(x):
    if parent[x] == x:
        return x
    else:
        tmp = find(parent[x])
        parent[x] = tmp
        return parent[x]

def union(a,b):
    a = find(a)
    b = find(b)
    if a < b :
        parent[b] = a
        cnt[a] += cnt[b]
    elif a > b:
        parent[a] = b
        cnt[b] += cnt[a]

n, m, q = map(int, input().split())
parent = [i for i in range(n+1)]
cnt = {i:1 for i in range(1,n+1)}

linked = [[0,0]]
for i in range(m):
    a, b = map(int,input().split())
    linked.append([a, b])

dis = []
check = [1] * (m+1)
for i in range(q):
    d = int(input())
    dis.append(d)
    check[d] = 0
   
for i in range(1,m+1):
    if check[i]:
        union(linked[i][0], linked[i][1])

pay = 0
for i in range(q-1,-1,-1):
    x = dis[i]
    a = linked[x][0]
    b = linked[x][1]
    p_a = find(a)
    p_b = find(b)
    if p_a != p_b:
        pay += (cnt[p_a] * cnt[p_b])
    union(a,b)

print(pay)