# -*- coding: utf-8 -*-
"""200.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3cusxSjNWxMSfhNemxC-xBnkwGhNLqY
"""

# dfs
from collections import deque
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        re = 0
                                               
        def dfs(nx,ny):
            
            if nx <0 or nx >= m or ny < 0 or ny >=n or grid[nx][ny]=='2':
                return 
            if grid[nx][ny]=='1':
                grid[nx][ny] = '2'
                dfs(nx+1,ny)
                dfs(nx-1,ny)
                dfs(nx,ny+1)
                dfs(nx,ny-1)
                    
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    dfs(i,j)
                    re += 1

        return re

# bfs

from collections import deque

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        m = len(grid)
        n = len(grid[0])
        queue = deque()
        re = 0
        
        mx = [-1,1,0,0]
        my = [0,0,-1,1]
        
        def bfs(x,y):
            queue.append((x,y))
            while queue:
                x,y = queue.popleft()
                grid[x][y] = '2'
                for i in range(4):
                    nx = x+mx[i]
                    ny = y+my[i]
                    if nx <0 or nx >= m or ny < 0 or ny >=n or grid[nx][ny]=='2':
                        continue
                    if grid[nx][ny] == '1' :
                        queue.append((nx,ny))
                                                     
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    bfs(i,j)
                    re += 1
        
        return re