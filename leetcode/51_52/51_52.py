# -*- coding: utf-8 -*-
"""51_52.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cvAl20lzHFvExyZ1DHsm5-Qs_Jb4xs5W
"""

# 51
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        
        result = []
        board = [['.'] * n for _ in range(n)]
        q_col = [False] * n
        
        def dfs(x):
            if x == n:
                tmp_lst = []
                for row in board:
                    tmp_lst.append("".join(row))
                result.append(tmp_lst)
                return
            
            for i in range(n):
                if q_col[i] or check(x,i):
                    continue
                board[x][i] = 'Q'
                q_col[i] = True 
                dfs(x+1)
                board[x][i]= '.'
                q_col[i] = False
                
                        
        def check(a,b):
            tmp_m = b
            tmp_p = b
            for k in range(a-1,-1,-1):
                tmp_m -= 1
                tmp_p += 1
                if tmp_m >= 0 and board[k][tmp_m] == 'Q':
                    return True
                if tmp_p < n and board[k][tmp_p] == 'Q':
                    return True
                    
            return False

        dfs(0)
        
        return result

# 52
class Solution:
    def totalNQueens(self, n: int) -> int:
        result = 0
        board = [['.'] * n for _ in range(n)]
        q_col = [False] * n
        
        def dfs(x):
            nonlocal result
            if x == n:
                result += 1
                return 
            
            for i in range(n):
                if q_col[i] or check(x,i):
                    continue
                board[x][i] = 'Q'
                q_col[i] = True 
                dfs(x+1)
                board[x][i]= '.'
                q_col[i] = False
                        
        def check(a,b):
            tmp_m = b
            tmp_p = b
            for k in range(a-1,-1,-1):
                tmp_m -= 1
                tmp_p += 1
                if tmp_m >= 0 and board[k][tmp_m] == 'Q':
                    return True
                if tmp_p < n and board[k][tmp_p] == 'Q':
                    return True
                    
            return False

        dfs(0)
        
        return result